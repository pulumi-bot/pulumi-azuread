# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationAppRole',
    'ApplicationOauth2Permission',
    'ApplicationOptionalClaims',
    'ApplicationOptionalClaimsAccessToken',
    'ApplicationOptionalClaimsIdToken',
    'ApplicationRequiredResourceAccess',
    'ApplicationRequiredResourceAccessResourceAccess',
    'ServicePrincipalOauth2Permission',
    'GetApplicationAppRole',
    'GetApplicationOauth2Permission',
    'GetApplicationOptionalClaims',
    'GetApplicationOptionalClaimsAccessToken',
    'GetApplicationOptionalClaimsIdToken',
    'GetApplicationRequiredResourceAccess',
    'GetApplicationRequiredResourceAccessResourceAccess',
    'GetDomainsDomain',
    'GetServicePrincipalAppRole',
    'GetServicePrincipalOauth2Permission',
    'GetUsersUser',
]

@pulumi.output_type
class ApplicationAppRole(dict):
    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Determines if the permission is enabled: defaults to `true`.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOauth2Permission(dict):
    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[str]:
        """
        Permission help text that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[str]:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Determines if the app role is enabled: Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[str]:
        """
        Permission help text that appears in the end user consent experience.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[str]:
        """
        Display name for the permission that appears in the end user consent experience.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaims(dict):
    @property
    @pulumi.getter(name="accessTokens")
    def access_tokens(self) -> Optional[List['outputs.ApplicationOptionalClaimsAccessToken']]:
        ...

    @property
    @pulumi.getter(name="idTokens")
    def id_tokens(self) -> Optional[List['outputs.ApplicationOptionalClaimsIdToken']]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsAccessToken(dict):
    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsIdToken(dict):
    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name for the application.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccess(dict):
    @property
    @pulumi.getter(name="resourceAccesses")
    def resource_accesses(self) -> List['outputs.ApplicationRequiredResourceAccessResourceAccess']:
        """
        A collection of `resource_access` blocks as documented below.
        """
        ...

    @property
    @pulumi.getter(name="resourceAppId")
    def resource_app_id(self) -> str:
        """
        The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccessResourceAccess(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePrincipalOauth2Permission(dict):
    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[str]:
        """
        The description of the admin consent.
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[str]:
        """
        The display name of the admin consent.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for one of the `OAuth2Permission`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Is this permission enabled?
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the permission.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[str]:
        """
        The description of the user consent.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[str]:
        """
        The display name of the user consent.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The name of this permission.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationAppRole(dict):
    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOauth2Permission(dict):
    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> str:
        """
        The description of the admin consent
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> str:
        """
        The display name of the admin consent
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> str:
        """
        The description of the user consent
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> str:
        """
        The display name of the user consent
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaims(dict):
    @property
    @pulumi.getter(name="accessTokens")
    def access_tokens(self) -> Optional[List['outputs.GetApplicationOptionalClaimsAccessToken']]:
        ...

    @property
    @pulumi.getter(name="idTokens")
    def id_tokens(self) -> Optional[List['outputs.GetApplicationOptionalClaimsIdToken']]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaimsAccessToken(dict):
    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Application within Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaimsIdToken(dict):
    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Application within Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationRequiredResourceAccess(dict):
    @property
    @pulumi.getter(name="resourceAccesses")
    def resource_accesses(self) -> List['outputs.GetApplicationRequiredResourceAccessResourceAccess']:
        """
        A collection of `resource_access` blocks as documented below
        """
        ...

    @property
    @pulumi.getter(name="resourceAppId")
    def resource_app_id(self) -> str:
        """
        The unique identifier for the resource that the application requires access to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationRequiredResourceAccessResourceAccess(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainsDomain(dict):
    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        The authentication type of the domain (Managed or Federated).
        """
        ...

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The name of the domain.
        """
        ...

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        `True` if this is the default domain that is used for user creation.
        """
        ...

    @property
    @pulumi.getter(name="isInitial")
    def is_initial(self) -> bool:
        """
        `True` if this is the initial domain created by Azure Activie Directory.
        """
        ...

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> bool:
        """
        `True` if the domain has completed domain ownership verification.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServicePrincipalAppRole(dict):
    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Display Name of the Azure AD Application associated with this Service Principal.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServicePrincipalOauth2Permission(dict):
    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> str:
        """
        The description of the admin consent
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> str:
        """
        The display name of the admin consent
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> str:
        """
        The description of the user consent
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> str:
        """
        The display name of the user consent
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUsersUser(dict):
    @property
    @pulumi.getter(name="accountEnabled")
    def account_enabled(self) -> bool:
        """
        `True` if the account is enabled; otherwise `False`.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Display Name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="immutableId")
    def immutable_id(self) -> str:
        """
        The value used to associate an on-premises Active Directory user account with their Azure AD user object.
        """
        ...

    @property
    @pulumi.getter
    def mail(self) -> str:
        """
        The primary email address of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="mailNickname")
    def mail_nickname(self) -> str:
        """
        The email alias of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="onpremisesSamAccountName")
    def onpremises_sam_account_name(self) -> str:
        """
        The on premise sam account name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="onpremisesUserPrincipalName")
    def onpremises_user_principal_name(self) -> str:
        """
        The on premise user principal name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="usageLocation")
    def usage_location(self) -> str:
        """
        The usage location of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        The User Principal Name of the Azure AD User.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


