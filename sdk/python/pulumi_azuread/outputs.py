# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from . import _utilities, _tables

@pulumi.output_type
class ApplicationAppRole(dict):
    allowed_member_types: List[str] = pulumi.output_property("allowedMemberTypes")
    """
    Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
    """
    description: str = pulumi.output_property("description")
    """
    Permission help text that appears in the admin app assignment and consent experiences.
    """
    display_name: str = pulumi.output_property("displayName")
    """
    Display name for the permission that appears in the admin consent and app assignment experiences.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: Optional[bool] = pulumi.output_property("isEnabled")
    """
    Determines if the permission is enabled: defaults to `true`.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOauth2Permission(dict):
    admin_consent_description: Optional[str] = pulumi.output_property("adminConsentDescription")
    """
    Permission help text that appears in the admin consent and app assignment experiences.
    """
    admin_consent_display_name: Optional[str] = pulumi.output_property("adminConsentDisplayName")
    """
    Display name for the permission that appears in the admin consent and app assignment experiences.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
    """
    is_enabled: Optional[bool] = pulumi.output_property("isEnabled")
    """
    Determines if the app role is enabled: Defaults to `true`.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
    """
    user_consent_description: Optional[str] = pulumi.output_property("userConsentDescription")
    """
    Permission help text that appears in the end user consent experience.
    """
    user_consent_display_name: Optional[str] = pulumi.output_property("userConsentDisplayName")
    """
    Display name for the permission that appears in the end user consent experience.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaims(dict):
    access_tokens: Optional[List['outputs.ApplicationOptionalClaimsAccessToken']] = pulumi.output_property("accessTokens")
    id_tokens: Optional[List['outputs.ApplicationOptionalClaimsIdToken']] = pulumi.output_property("idTokens")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsAccessToken(dict):
    additional_properties: Optional[List[str]] = pulumi.output_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.output_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the optional claim.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsIdToken(dict):
    additional_properties: Optional[List[str]] = pulumi.output_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.output_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    name: str = pulumi.output_property("name")
    """
    The display name for the application.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccess(dict):
    resource_accesses: List['outputs.ApplicationRequiredResourceAccessResourceAccess'] = pulumi.output_property("resourceAccesses")
    """
    A collection of `resource_access` blocks as documented below.
    """
    resource_app_id: str = pulumi.output_property("resourceAppId")
    """
    The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccessResourceAccess(dict):
    id: str = pulumi.output_property("id")
    """
    The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePrincipalOauth2Permission(dict):
    admin_consent_description: Optional[str] = pulumi.output_property("adminConsentDescription")
    """
    The description of the admin consent.
    """
    admin_consent_display_name: Optional[str] = pulumi.output_property("adminConsentDisplayName")
    """
    The display name of the admin consent.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The unique identifier for one of the `OAuth2Permission`.
    """
    is_enabled: Optional[bool] = pulumi.output_property("isEnabled")
    """
    Is this permission enabled?
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of the permission.
    """
    user_consent_description: Optional[str] = pulumi.output_property("userConsentDescription")
    """
    The description of the user consent.
    """
    user_consent_display_name: Optional[str] = pulumi.output_property("userConsentDisplayName")
    """
    The display name of the user consent.
    """
    value: Optional[str] = pulumi.output_property("value")
    """
    The name of this permission.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationAppRole(dict):
    allowed_member_types: List[str] = pulumi.output_property("allowedMemberTypes")
    """
    Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
    """
    description: str = pulumi.output_property("description")
    """
    Permission help text that appears in the admin app assignment and consent experiences.
    """
    display_name: str = pulumi.output_property("displayName")
    """
    Display name for the permission that appears in the admin consent and app assignment experiences.
    """
    id: str = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.output_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    value: str = pulumi.output_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOauth2Permission(dict):
    admin_consent_description: str = pulumi.output_property("adminConsentDescription")
    """
    The description of the admin consent
    """
    admin_consent_display_name: str = pulumi.output_property("adminConsentDisplayName")
    """
    The display name of the admin consent
    """
    id: str = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.output_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the permission
    """
    user_consent_description: str = pulumi.output_property("userConsentDescription")
    """
    The description of the user consent
    """
    user_consent_display_name: str = pulumi.output_property("userConsentDisplayName")
    """
    The display name of the user consent
    """
    value: str = pulumi.output_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaims(dict):
    access_tokens: Optional[List['outputs.GetApplicationOptionalClaimsAccessToken']] = pulumi.output_property("accessTokens")
    id_tokens: Optional[List['outputs.GetApplicationOptionalClaimsIdToken']] = pulumi.output_property("idTokens")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaimsAccessToken(dict):
    additional_properties: Optional[List[str]] = pulumi.output_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.output_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Application within Azure Active Directory.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationOptionalClaimsIdToken(dict):
    additional_properties: Optional[List[str]] = pulumi.output_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.output_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Application within Azure Active Directory.
    """
    source: Optional[str] = pulumi.output_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationRequiredResourceAccess(dict):
    resource_accesses: List['outputs.GetApplicationRequiredResourceAccessResourceAccess'] = pulumi.output_property("resourceAccesses")
    """
    A collection of `resource_access` blocks as documented below
    """
    resource_app_id: str = pulumi.output_property("resourceAppId")
    """
    The unique identifier for the resource that the application requires access to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationRequiredResourceAccessResourceAccess(dict):
    id: str = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the permission
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetDomainsDomain(dict):
    authentication_type: str = pulumi.output_property("authenticationType")
    """
    The authentication type of the domain (Managed or Federated).
    """
    domain_name: str = pulumi.output_property("domainName")
    """
    The name of the domain.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    `True` if this is the default domain that is used for user creation.
    """
    is_initial: bool = pulumi.output_property("isInitial")
    """
    `True` if this is the initial domain created by Azure Activie Directory.
    """
    is_verified: bool = pulumi.output_property("isVerified")
    """
    `True` if the domain has completed domain ownership verification.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServicePrincipalAppRole(dict):
    allowed_member_types: List[str] = pulumi.output_property("allowedMemberTypes")
    """
    Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
    """
    description: str = pulumi.output_property("description")
    """
    Permission help text that appears in the admin app assignment and consent experiences.
    """
    display_name: str = pulumi.output_property("displayName")
    """
    The Display Name of the Azure AD Application associated with this Service Principal.
    """
    id: str = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.output_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    value: str = pulumi.output_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServicePrincipalOauth2Permission(dict):
    admin_consent_description: str = pulumi.output_property("adminConsentDescription")
    """
    The description of the admin consent
    """
    admin_consent_display_name: str = pulumi.output_property("adminConsentDisplayName")
    """
    The display name of the admin consent
    """
    id: str = pulumi.output_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.output_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the permission
    """
    user_consent_description: str = pulumi.output_property("userConsentDescription")
    """
    The description of the user consent
    """
    user_consent_display_name: str = pulumi.output_property("userConsentDisplayName")
    """
    The display name of the user consent
    """
    value: str = pulumi.output_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetUsersUser(dict):
    account_enabled: bool = pulumi.output_property("accountEnabled")
    """
    `True` if the account is enabled; otherwise `False`.
    """
    display_name: str = pulumi.output_property("displayName")
    """
    The Display Name of the Azure AD User.
    """
    immutable_id: str = pulumi.output_property("immutableId")
    """
    The value used to associate an on-premises Active Directory user account with their Azure AD user object.
    """
    mail: str = pulumi.output_property("mail")
    """
    The primary email address of the Azure AD User.
    """
    mail_nickname: str = pulumi.output_property("mailNickname")
    """
    The email alias of the Azure AD User.
    """
    object_id: str = pulumi.output_property("objectId")
    onpremises_sam_account_name: str = pulumi.output_property("onpremisesSamAccountName")
    """
    The on premise sam account name of the Azure AD User.
    """
    onpremises_user_principal_name: str = pulumi.output_property("onpremisesUserPrincipalName")
    """
    The on premise user principal name of the Azure AD User.
    """
    usage_location: str = pulumi.output_property("usageLocation")
    """
    The usage location of the Azure AD User.
    """
    user_principal_name: str = pulumi.output_property("userPrincipalName")
    """
    The User Principal Name of the Azure AD User.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


