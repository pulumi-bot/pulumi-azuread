# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationAppRole',
    'ApplicationOauth2Permission',
    'ApplicationOptionalClaims',
    'ApplicationOptionalClaimsAccessToken',
    'ApplicationOptionalClaimsIdToken',
    'ApplicationRequiredResourceAccess',
    'ApplicationRequiredResourceAccessResourceAccess',
    'ServicePrincipalOauth2Permission',
    'GetApplicationAppRoleResult',
    'GetApplicationOauth2PermissionResult',
    'GetApplicationOptionalClaimsResult',
    'GetApplicationOptionalClaimsAccessTokenResult',
    'GetApplicationOptionalClaimsIdTokenResult',
    'GetApplicationRequiredResourceAccessResult',
    'GetApplicationRequiredResourceAccessResourceAccessResult',
    'GetDomainsDomainResult',
    'GetServicePrincipalAppRoleResult',
    'GetServicePrincipalOauth2PermissionResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class ApplicationAppRole(dict):
    def __init__(__self__, *,
                 allowed_member_types: List[str],
                 description: str,
                 display_name: str,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param List[str] allowed_member_types: Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        :param str description: Permission help text that appears in the admin app assignment and consent experiences.
        :param str display_name: Display name for the permission that appears in the admin consent and app assignment experiences.
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the permission is enabled: defaults to `true`.
        :param str value: The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
        """
        pulumi.set(__self__, "allowed_member_types", allowed_member_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Determines if the permission is enabled: defaults to `true`.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOauth2Permission(dict):
    def __init__(__self__, *,
                 admin_consent_description: Optional[str] = None,
                 admin_consent_display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 type: Optional[str] = None,
                 user_consent_description: Optional[str] = None,
                 user_consent_display_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str admin_consent_description: Permission help text that appears in the admin consent and app assignment experiences.
        :param str admin_consent_display_name: Display name for the permission that appears in the admin consent and app assignment experiences.
        :param str id: The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        :param bool is_enabled: Determines if the app role is enabled: Defaults to `true`.
        :param str type: Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
        :param str user_consent_description: Permission help text that appears in the end user consent experience.
        :param str user_consent_display_name: Display name for the permission that appears in the end user consent experience.
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        if admin_consent_description is not None:
            pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        if admin_consent_display_name is not None:
            pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_consent_description is not None:
            pulumi.set(__self__, "user_consent_description", user_consent_description)
        if user_consent_display_name is not None:
            pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[str]:
        """
        Permission help text that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[str]:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Determines if the app role is enabled: Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[str]:
        """
        Permission help text that appears in the end user consent experience.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[str]:
        """
        Display name for the permission that appears in the end user consent experience.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaims(dict):
    def __init__(__self__, *,
                 access_tokens: Optional[List['outputs.ApplicationOptionalClaimsAccessToken']] = None,
                 id_tokens: Optional[List['outputs.ApplicationOptionalClaimsIdToken']] = None):
        if access_tokens is not None:
            pulumi.set(__self__, "access_tokens", access_tokens)
        if id_tokens is not None:
            pulumi.set(__self__, "id_tokens", id_tokens)

    @property
    @pulumi.getter(name="accessTokens")
    def access_tokens(self) -> Optional[List['outputs.ApplicationOptionalClaimsAccessToken']]:
        ...

    @property
    @pulumi.getter(name="idTokens")
    def id_tokens(self) -> Optional[List['outputs.ApplicationOptionalClaimsIdToken']]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsAccessToken(dict):
    def __init__(__self__, *,
                 name: str,
                 additional_properties: Optional[List[str]] = None,
                 essential: Optional[bool] = None,
                 source: Optional[str] = None):
        """
        :param str name: The name of the optional claim.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the optional claim.
        """
        ...

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOptionalClaimsIdToken(dict):
    def __init__(__self__, *,
                 name: str,
                 additional_properties: Optional[List[str]] = None,
                 essential: Optional[bool] = None,
                 source: Optional[str] = None):
        """
        :param str name: The display name for the application.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name for the application.
        """
        ...

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccess(dict):
    def __init__(__self__, *,
                 resource_accesses: List['outputs.ApplicationRequiredResourceAccessResourceAccess'],
                 resource_app_id: str):
        """
        :param List['ApplicationRequiredResourceAccessResourceAccessArgs'] resource_accesses: A collection of `resource_access` blocks as documented below.
        :param str resource_app_id: The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        """
        pulumi.set(__self__, "resource_accesses", resource_accesses)
        pulumi.set(__self__, "resource_app_id", resource_app_id)

    @property
    @pulumi.getter(name="resourceAccesses")
    def resource_accesses(self) -> List['outputs.ApplicationRequiredResourceAccessResourceAccess']:
        """
        A collection of `resource_access` blocks as documented below.
        """
        ...

    @property
    @pulumi.getter(name="resourceAppId")
    def resource_app_id(self) -> str:
        """
        The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationRequiredResourceAccessResourceAccess(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        :param str type: Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePrincipalOauth2Permission(dict):
    def __init__(__self__, *,
                 admin_consent_description: Optional[str] = None,
                 admin_consent_display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 type: Optional[str] = None,
                 user_consent_description: Optional[str] = None,
                 user_consent_display_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str admin_consent_description: The description of the admin consent.
        :param str admin_consent_display_name: The display name of the admin consent.
        :param str id: The unique identifier for one of the `OAuth2Permission`.
        :param bool is_enabled: Is this permission enabled?
        :param str type: The type of the permission.
        :param str user_consent_description: The description of the user consent.
        :param str user_consent_display_name: The display name of the user consent.
        :param str value: The name of this permission.
        """
        if admin_consent_description is not None:
            pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        if admin_consent_display_name is not None:
            pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_consent_description is not None:
            pulumi.set(__self__, "user_consent_description", user_consent_description)
        if user_consent_display_name is not None:
            pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[str]:
        """
        The description of the admin consent.
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[str]:
        """
        The display name of the admin consent.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for one of the `OAuth2Permission`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Is this permission enabled?
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the permission.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[str]:
        """
        The description of the user consent.
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[str]:
        """
        The display name of the user consent.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The name of this permission.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApplicationAppRoleResult(dict):
    def __init__(__self__, *,
                 allowed_member_types: List[str],
                 description: str,
                 display_name: str,
                 id: str,
                 is_enabled: bool,
                 value: str):
        """
        :param List[str] allowed_member_types: Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        :param str description: Permission help text that appears in the admin app assignment and consent experiences.
        :param str display_name: Display name for the permission that appears in the admin consent and app assignment experiences.
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        pulumi.set(__self__, "allowed_member_types", allowed_member_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the permission that appears in the admin consent and app assignment experiences.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...


@pulumi.output_type
class GetApplicationOauth2PermissionResult(dict):
    def __init__(__self__, *,
                 admin_consent_description: str,
                 admin_consent_display_name: str,
                 id: str,
                 is_enabled: bool,
                 type: str,
                 user_consent_description: str,
                 user_consent_display_name: str,
                 value: str):
        """
        :param str admin_consent_description: The description of the admin consent
        :param str admin_consent_display_name: The display name of the admin consent
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str type: The type of the permission
        :param str user_consent_description: The description of the user consent
        :param str user_consent_display_name: The display name of the user consent
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_consent_description", user_consent_description)
        pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> str:
        """
        The description of the admin consent
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> str:
        """
        The display name of the admin consent
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> str:
        """
        The description of the user consent
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> str:
        """
        The display name of the user consent
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...


@pulumi.output_type
class GetApplicationOptionalClaimsResult(dict):
    def __init__(__self__, *,
                 access_tokens: Optional[List['outputs.GetApplicationOptionalClaimsAccessTokenResult']] = None,
                 id_tokens: Optional[List['outputs.GetApplicationOptionalClaimsIdTokenResult']] = None):
        if access_tokens is not None:
            pulumi.set(__self__, "access_tokens", access_tokens)
        if id_tokens is not None:
            pulumi.set(__self__, "id_tokens", id_tokens)

    @property
    @pulumi.getter(name="accessTokens")
    def access_tokens(self) -> Optional[List['outputs.GetApplicationOptionalClaimsAccessTokenResult']]:
        ...

    @property
    @pulumi.getter(name="idTokens")
    def id_tokens(self) -> Optional[List['outputs.GetApplicationOptionalClaimsIdTokenResult']]:
        ...


@pulumi.output_type
class GetApplicationOptionalClaimsAccessTokenResult(dict):
    def __init__(__self__, *,
                 name: str,
                 additional_properties: Optional[List[str]] = None,
                 essential: Optional[bool] = None,
                 source: Optional[str] = None):
        """
        :param str name: Specifies the name of the Application within Azure Active Directory.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Application within Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...


@pulumi.output_type
class GetApplicationOptionalClaimsIdTokenResult(dict):
    def __init__(__self__, *,
                 name: str,
                 additional_properties: Optional[List[str]] = None,
                 essential: Optional[bool] = None,
                 source: Optional[str] = None):
        """
        :param str name: Specifies the name of the Application within Azure Active Directory.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Application within Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[List[str]]:
        """
        List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        """
        ...

    @property
    @pulumi.getter
    def essential(self) -> Optional[bool]:
        """
        Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        """
        ...

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        ...


@pulumi.output_type
class GetApplicationRequiredResourceAccessResult(dict):
    def __init__(__self__, *,
                 resource_accesses: List['outputs.GetApplicationRequiredResourceAccessResourceAccessResult'],
                 resource_app_id: str):
        """
        :param List['GetApplicationRequiredResourceAccessResourceAccessArgs'] resource_accesses: A collection of `resource_access` blocks as documented below
        :param str resource_app_id: The unique identifier for the resource that the application requires access to.
        """
        pulumi.set(__self__, "resource_accesses", resource_accesses)
        pulumi.set(__self__, "resource_app_id", resource_app_id)

    @property
    @pulumi.getter(name="resourceAccesses")
    def resource_accesses(self) -> List['outputs.GetApplicationRequiredResourceAccessResourceAccessResult']:
        """
        A collection of `resource_access` blocks as documented below
        """
        ...

    @property
    @pulumi.getter(name="resourceAppId")
    def resource_app_id(self) -> str:
        """
        The unique identifier for the resource that the application requires access to.
        """
        ...


@pulumi.output_type
class GetApplicationRequiredResourceAccessResourceAccessResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The unique identifier of the `app_role`.
        :param str type: The type of the permission
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 authentication_type: str,
                 domain_name: str,
                 is_default: bool,
                 is_initial: bool,
                 is_verified: bool):
        """
        :param str authentication_type: The authentication type of the domain (Managed or Federated).
        :param str domain_name: The name of the domain.
        :param bool is_default: `True` if this is the default domain that is used for user creation.
        :param bool is_initial: `True` if this is the initial domain created by Azure Activie Directory.
        :param bool is_verified: `True` if the domain has completed domain ownership verification.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_initial", is_initial)
        pulumi.set(__self__, "is_verified", is_verified)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        The authentication type of the domain (Managed or Federated).
        """
        ...

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The name of the domain.
        """
        ...

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        `True` if this is the default domain that is used for user creation.
        """
        ...

    @property
    @pulumi.getter(name="isInitial")
    def is_initial(self) -> bool:
        """
        `True` if this is the initial domain created by Azure Activie Directory.
        """
        ...

    @property
    @pulumi.getter(name="isVerified")
    def is_verified(self) -> bool:
        """
        `True` if the domain has completed domain ownership verification.
        """
        ...


@pulumi.output_type
class GetServicePrincipalAppRoleResult(dict):
    def __init__(__self__, *,
                 allowed_member_types: List[str],
                 description: str,
                 display_name: str,
                 id: str,
                 is_enabled: bool,
                 value: str):
        """
        :param List[str] allowed_member_types: Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        :param str description: Permission help text that appears in the admin app assignment and consent experiences.
        :param str display_name: The Display Name of the Azure AD Application associated with this Service Principal.
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        pulumi.set(__self__, "allowed_member_types", allowed_member_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> List[str]:
        """
        Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Permission help text that appears in the admin app assignment and consent experiences.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Display Name of the Azure AD Application associated with this Service Principal.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...


@pulumi.output_type
class GetServicePrincipalOauth2PermissionResult(dict):
    def __init__(__self__, *,
                 admin_consent_description: str,
                 admin_consent_display_name: str,
                 id: str,
                 is_enabled: bool,
                 type: str,
                 user_consent_description: str,
                 user_consent_display_name: str,
                 value: str):
        """
        :param str admin_consent_description: The description of the admin consent
        :param str admin_consent_display_name: The display name of the admin consent
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str type: The type of the permission
        :param str user_consent_description: The description of the user consent
        :param str user_consent_display_name: The display name of the user consent
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_consent_description", user_consent_description)
        pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> str:
        """
        The description of the admin consent
        """
        ...

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> str:
        """
        The display name of the admin consent
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the `app_role`.
        """
        ...

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Determines if the app role is enabled.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the permission
        """
        ...

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> str:
        """
        The description of the user consent
        """
        ...

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> str:
        """
        The display name of the user consent
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        ...


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 account_enabled: bool,
                 display_name: str,
                 immutable_id: str,
                 mail: str,
                 mail_nickname: str,
                 object_id: str,
                 onpremises_sam_account_name: str,
                 onpremises_user_principal_name: str,
                 usage_location: str,
                 user_principal_name: str):
        """
        :param bool account_enabled: `True` if the account is enabled; otherwise `False`.
        :param str display_name: The Display Name of the Azure AD User.
        :param str immutable_id: The value used to associate an on-premises Active Directory user account with their Azure AD user object.
        :param str mail: The primary email address of the Azure AD User.
        :param str mail_nickname: The email alias of the Azure AD User.
        :param str onpremises_sam_account_name: The on premise sam account name of the Azure AD User.
        :param str onpremises_user_principal_name: The on premise user principal name of the Azure AD User.
        :param str usage_location: The usage location of the Azure AD User.
        :param str user_principal_name: The User Principal Name of the Azure AD User.
        """
        pulumi.set(__self__, "account_enabled", account_enabled)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "immutable_id", immutable_id)
        pulumi.set(__self__, "mail", mail)
        pulumi.set(__self__, "mail_nickname", mail_nickname)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "onpremises_sam_account_name", onpremises_sam_account_name)
        pulumi.set(__self__, "onpremises_user_principal_name", onpremises_user_principal_name)
        pulumi.set(__self__, "usage_location", usage_location)
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="accountEnabled")
    def account_enabled(self) -> bool:
        """
        `True` if the account is enabled; otherwise `False`.
        """
        ...

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Display Name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="immutableId")
    def immutable_id(self) -> str:
        """
        The value used to associate an on-premises Active Directory user account with their Azure AD user object.
        """
        ...

    @property
    @pulumi.getter
    def mail(self) -> str:
        """
        The primary email address of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="mailNickname")
    def mail_nickname(self) -> str:
        """
        The email alias of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="onpremisesSamAccountName")
    def onpremises_sam_account_name(self) -> str:
        """
        The on premise sam account name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="onpremisesUserPrincipalName")
    def onpremises_user_principal_name(self) -> str:
        """
        The on premise user principal name of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="usageLocation")
    def usage_location(self) -> str:
        """
        The usage location of the Azure AD User.
        """
        ...

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        The User Principal Name of the Azure AD User.
        """
        ...


