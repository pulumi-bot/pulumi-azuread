# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = [
    'ApplicationAppRoleArgs',
    'ApplicationOauth2PermissionArgs',
    'ApplicationOptionalClaimsArgs',
    'ApplicationOptionalClaimsAccessTokenArgs',
    'ApplicationOptionalClaimsIdTokenArgs',
    'ApplicationRequiredResourceAccessArgs',
    'ApplicationRequiredResourceAccessResourceAccessArgs',
    'ServicePrincipalOauth2PermissionArgs',
    'GetApplicationOauth2PermissionArgs',
    'GetApplicationOptionalClaimsArgs',
    'GetApplicationOptionalClaimsAccessTokenArgs',
    'GetApplicationOptionalClaimsIdTokenArgs',
    'GetServicePrincipalOauth2PermissionArgs',
]

@pulumi.input_type
class ApplicationAppRoleArgs:
    allowed_member_types: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("allowedMemberTypes")
    """
    Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
    """
    description: pulumi.Input[str] = pulumi.input_property("description")
    """
    Permission help text that appears in the admin app assignment and consent experiences.
    """
    display_name: pulumi.Input[str] = pulumi.input_property("displayName")
    """
    Display name for the permission that appears in the admin consent and app assignment experiences.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("isEnabled")
    """
    Determines if the permission is enabled: defaults to `true`.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_member_types: pulumi.Input[List[pulumi.Input[str]]], description: pulumi.Input[str], display_name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, is_enabled: Optional[pulumi.Input[bool]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_member_types: Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        :param pulumi.Input[str] description: Permission help text that appears in the admin app assignment and consent experiences.
        :param pulumi.Input[str] display_name: Display name for the permission that appears in the admin consent and app assignment experiences.
        :param pulumi.Input[str] id: The unique identifier of the `app_role`.
        :param pulumi.Input[bool] is_enabled: Determines if the permission is enabled: defaults to `true`.
        :param pulumi.Input[str] value: The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
        """
        __self__.allowed_member_types = allowed_member_types
        __self__.description = description
        __self__.display_name = display_name
        __self__.id = id
        __self__.is_enabled = is_enabled
        __self__.value = value

@pulumi.input_type
class ApplicationOauth2PermissionArgs:
    admin_consent_description: Optional[pulumi.Input[str]] = pulumi.input_property("adminConsentDescription")
    """
    Permission help text that appears in the admin consent and app assignment experiences.
    """
    admin_consent_display_name: Optional[pulumi.Input[str]] = pulumi.input_property("adminConsentDisplayName")
    """
    Display name for the permission that appears in the admin consent and app assignment experiences.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
    """
    is_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("isEnabled")
    """
    Determines if the app role is enabled: Defaults to `true`.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
    """
    user_consent_description: Optional[pulumi.Input[str]] = pulumi.input_property("userConsentDescription")
    """
    Permission help text that appears in the end user consent experience.
    """
    user_consent_display_name: Optional[pulumi.Input[str]] = pulumi.input_property("userConsentDisplayName")
    """
    Display name for the permission that appears in the end user consent experience.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, admin_consent_description: Optional[pulumi.Input[str]] = None, admin_consent_display_name: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, is_enabled: Optional[pulumi.Input[bool]] = None, type: Optional[pulumi.Input[str]] = None, user_consent_description: Optional[pulumi.Input[str]] = None, user_consent_display_name: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] admin_consent_description: Permission help text that appears in the admin consent and app assignment experiences.
        :param pulumi.Input[str] admin_consent_display_name: Display name for the permission that appears in the admin consent and app assignment experiences.
        :param pulumi.Input[str] id: The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        :param pulumi.Input[bool] is_enabled: Determines if the app role is enabled: Defaults to `true`.
        :param pulumi.Input[str] type: Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.
        :param pulumi.Input[str] user_consent_description: Permission help text that appears in the end user consent experience.
        :param pulumi.Input[str] user_consent_display_name: Display name for the permission that appears in the end user consent experience.
        :param pulumi.Input[str] value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        __self__.admin_consent_description = admin_consent_description
        __self__.admin_consent_display_name = admin_consent_display_name
        __self__.id = id
        __self__.is_enabled = is_enabled
        __self__.type = type
        __self__.user_consent_description = user_consent_description
        __self__.user_consent_display_name = user_consent_display_name
        __self__.value = value

@pulumi.input_type
class ApplicationOptionalClaimsArgs:
    access_tokens: Optional[pulumi.Input[List[pulumi.Input['ApplicationOptionalClaimsAccessTokenArgs']]]] = pulumi.input_property("accessTokens")
    id_tokens: Optional[pulumi.Input[List[pulumi.Input['ApplicationOptionalClaimsIdTokenArgs']]]] = pulumi.input_property("idTokens")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_tokens: Optional[pulumi.Input[List[pulumi.Input['ApplicationOptionalClaimsAccessTokenArgs']]]] = None, id_tokens: Optional[pulumi.Input[List[pulumi.Input['ApplicationOptionalClaimsIdTokenArgs']]]] = None) -> None:
        __self__.access_tokens = access_tokens
        __self__.id_tokens = id_tokens

@pulumi.input_type
class ApplicationOptionalClaimsAccessTokenArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the optional claim.
    """
    additional_properties: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[pulumi.Input[bool]] = pulumi.input_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    source: Optional[pulumi.Input[str]] = pulumi.input_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], additional_properties: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, essential: Optional[pulumi.Input[bool]] = None, source: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the optional claim.
        :param pulumi.Input[List[pulumi.Input[str]]] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param pulumi.Input[bool] essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param pulumi.Input[str] source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        __self__.name = name
        __self__.additional_properties = additional_properties
        __self__.essential = essential
        __self__.source = source

@pulumi.input_type
class ApplicationOptionalClaimsIdTokenArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The display name for the application.
    """
    additional_properties: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[pulumi.Input[bool]] = pulumi.input_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    source: Optional[pulumi.Input[str]] = pulumi.input_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], additional_properties: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, essential: Optional[pulumi.Input[bool]] = None, source: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The display name for the application.
        :param pulumi.Input[List[pulumi.Input[str]]] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param pulumi.Input[bool] essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param pulumi.Input[str] source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        __self__.name = name
        __self__.additional_properties = additional_properties
        __self__.essential = essential
        __self__.source = source

@pulumi.input_type
class ApplicationRequiredResourceAccessArgs:
    resource_accesses: pulumi.Input[List[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]] = pulumi.input_property("resourceAccesses")
    """
    A collection of `resource_access` blocks as documented below.
    """
    resource_app_id: pulumi.Input[str] = pulumi.input_property("resourceAppId")
    """
    The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource_accesses: pulumi.Input[List[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]], resource_app_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]] resource_accesses: A collection of `resource_access` blocks as documented below.
        :param pulumi.Input[str] resource_app_id: The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        """
        __self__.resource_accesses = resource_accesses
        __self__.resource_app_id = resource_app_id

@pulumi.input_type
class ApplicationRequiredResourceAccessResourceAccessArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] id: The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
        :param pulumi.Input[str] type: Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        """
        __self__.id = id
        __self__.type = type

@pulumi.input_type
class ServicePrincipalOauth2PermissionArgs:
    admin_consent_description: Optional[pulumi.Input[str]] = pulumi.input_property("adminConsentDescription")
    """
    The description of the admin consent.
    """
    admin_consent_display_name: Optional[pulumi.Input[str]] = pulumi.input_property("adminConsentDisplayName")
    """
    The display name of the admin consent.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The unique identifier for one of the `OAuth2Permission`.
    """
    is_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("isEnabled")
    """
    Is this permission enabled?
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of the permission.
    """
    user_consent_description: Optional[pulumi.Input[str]] = pulumi.input_property("userConsentDescription")
    """
    The description of the user consent.
    """
    user_consent_display_name: Optional[pulumi.Input[str]] = pulumi.input_property("userConsentDisplayName")
    """
    The display name of the user consent.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The name of this permission.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, admin_consent_description: Optional[pulumi.Input[str]] = None, admin_consent_display_name: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, is_enabled: Optional[pulumi.Input[bool]] = None, type: Optional[pulumi.Input[str]] = None, user_consent_description: Optional[pulumi.Input[str]] = None, user_consent_display_name: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] admin_consent_description: The description of the admin consent.
        :param pulumi.Input[str] admin_consent_display_name: The display name of the admin consent.
        :param pulumi.Input[str] id: The unique identifier for one of the `OAuth2Permission`.
        :param pulumi.Input[bool] is_enabled: Is this permission enabled?
        :param pulumi.Input[str] type: The type of the permission.
        :param pulumi.Input[str] user_consent_description: The description of the user consent.
        :param pulumi.Input[str] user_consent_display_name: The display name of the user consent.
        :param pulumi.Input[str] value: The name of this permission.
        """
        __self__.admin_consent_description = admin_consent_description
        __self__.admin_consent_display_name = admin_consent_display_name
        __self__.id = id
        __self__.is_enabled = is_enabled
        __self__.type = type
        __self__.user_consent_description = user_consent_description
        __self__.user_consent_display_name = user_consent_display_name
        __self__.value = value

@pulumi.input_type
class GetApplicationOauth2PermissionArgs:
    admin_consent_description: str = pulumi.input_property("adminConsentDescription")
    """
    The description of the admin consent
    """
    admin_consent_display_name: str = pulumi.input_property("adminConsentDisplayName")
    """
    The display name of the admin consent
    """
    id: str = pulumi.input_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.input_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    type: str = pulumi.input_property("type")
    """
    The type of the permission
    """
    user_consent_description: str = pulumi.input_property("userConsentDescription")
    """
    The description of the user consent
    """
    user_consent_display_name: str = pulumi.input_property("userConsentDisplayName")
    """
    The display name of the user consent
    """
    value: str = pulumi.input_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, admin_consent_description: str, admin_consent_display_name: str, id: str, is_enabled: bool, type: str, user_consent_description: str, user_consent_display_name: str, value: str) -> None:
        """
        :param str admin_consent_description: The description of the admin consent
        :param str admin_consent_display_name: The display name of the admin consent
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str type: The type of the permission
        :param str user_consent_description: The description of the user consent
        :param str user_consent_display_name: The display name of the user consent
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        __self__.admin_consent_description = admin_consent_description
        __self__.admin_consent_display_name = admin_consent_display_name
        __self__.id = id
        __self__.is_enabled = is_enabled
        __self__.type = type
        __self__.user_consent_description = user_consent_description
        __self__.user_consent_display_name = user_consent_display_name
        __self__.value = value

@pulumi.input_type
class GetApplicationOptionalClaimsArgs:
    access_tokens: Optional[List['GetApplicationOptionalClaimsAccessTokenArgs']] = pulumi.input_property("accessTokens")
    id_tokens: Optional[List['GetApplicationOptionalClaimsIdTokenArgs']] = pulumi.input_property("idTokens")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_tokens: Optional[List['GetApplicationOptionalClaimsAccessTokenArgs']] = None, id_tokens: Optional[List['GetApplicationOptionalClaimsIdTokenArgs']] = None) -> None:
        __self__.access_tokens = access_tokens
        __self__.id_tokens = id_tokens

@pulumi.input_type
class GetApplicationOptionalClaimsAccessTokenArgs:
    name: str = pulumi.input_property("name")
    """
    Specifies the name of the Application within Azure Active Directory.
    """
    additional_properties: Optional[List[str]] = pulumi.input_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.input_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    source: Optional[str] = pulumi.input_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: str, additional_properties: Optional[List[str]] = None, essential: Optional[bool] = None, source: Optional[str] = None) -> None:
        """
        :param str name: Specifies the name of the Application within Azure Active Directory.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        __self__.name = name
        __self__.additional_properties = additional_properties
        __self__.essential = essential
        __self__.source = source

@pulumi.input_type
class GetApplicationOptionalClaimsIdTokenArgs:
    name: str = pulumi.input_property("name")
    """
    Specifies the name of the Application within Azure Active Directory.
    """
    additional_properties: Optional[List[str]] = pulumi.input_property("additionalProperties")
    """
    List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
    """
    essential: Optional[bool] = pulumi.input_property("essential")
    """
    Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
    """
    source: Optional[str] = pulumi.input_property("source")
    """
    The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: str, additional_properties: Optional[List[str]] = None, essential: Optional[bool] = None, source: Optional[str] = None) -> None:
        """
        :param str name: Specifies the name of the Application within Azure Active Directory.
        :param List[str] additional_properties: List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
        :param bool essential: Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
        :param str source: The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
        """
        __self__.name = name
        __self__.additional_properties = additional_properties
        __self__.essential = essential
        __self__.source = source

@pulumi.input_type
class GetServicePrincipalOauth2PermissionArgs:
    admin_consent_description: str = pulumi.input_property("adminConsentDescription")
    """
    The description of the admin consent
    """
    admin_consent_display_name: str = pulumi.input_property("adminConsentDisplayName")
    """
    The display name of the admin consent
    """
    id: str = pulumi.input_property("id")
    """
    The unique identifier of the `app_role`.
    """
    is_enabled: bool = pulumi.input_property("isEnabled")
    """
    Determines if the app role is enabled.
    """
    type: str = pulumi.input_property("type")
    """
    The type of the permission
    """
    user_consent_description: str = pulumi.input_property("userConsentDescription")
    """
    The description of the user consent
    """
    user_consent_display_name: str = pulumi.input_property("userConsentDisplayName")
    """
    The display name of the user consent
    """
    value: str = pulumi.input_property("value")
    """
    Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, admin_consent_description: str, admin_consent_display_name: str, id: str, is_enabled: bool, type: str, user_consent_description: str, user_consent_display_name: str, value: str) -> None:
        """
        :param str admin_consent_description: The description of the admin consent
        :param str admin_consent_display_name: The display name of the admin consent
        :param str id: The unique identifier of the `app_role`.
        :param bool is_enabled: Determines if the app role is enabled.
        :param str type: The type of the permission
        :param str user_consent_description: The description of the user consent
        :param str user_consent_display_name: The display name of the user consent
        :param str value: Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        """
        __self__.admin_consent_description = admin_consent_description
        __self__.admin_consent_display_name = admin_consent_display_name
        __self__.id = id
        __self__.is_enabled = is_enabled
        __self__.type = type
        __self__.user_consent_description = user_consent_description
        __self__.user_consent_display_name = user_consent_display_name
        __self__.value = value

