// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id *string `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
	Value *string `pulumi:"value"`
}

// ApplicationAppRoleInput is an input type that accepts ApplicationAppRoleArgs and ApplicationAppRoleOutput values.
// You can construct a concrete instance of `ApplicationAppRoleInput` via:
//
//          ApplicationAppRoleArgs{...}
type ApplicationAppRoleInput interface {
	pulumi.Input

	ToApplicationAppRoleOutput() ApplicationAppRoleOutput
	ToApplicationAppRoleOutputWithContext(context.Context) ApplicationAppRoleOutput
}

type ApplicationAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil)).Elem()
}

func (i ApplicationAppRoleArgs) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return i.ToApplicationAppRoleOutputWithContext(context.Background())
}

func (i ApplicationAppRoleArgs) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleOutput)
}

// ApplicationAppRoleArrayInput is an input type that accepts ApplicationAppRoleArray and ApplicationAppRoleArrayOutput values.
// You can construct a concrete instance of `ApplicationAppRoleArrayInput` via:
//
//          ApplicationAppRoleArray{ ApplicationAppRoleArgs{...} }
type ApplicationAppRoleArrayInput interface {
	pulumi.Input

	ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput
	ToApplicationAppRoleArrayOutputWithContext(context.Context) ApplicationAppRoleArrayOutput
}

type ApplicationAppRoleArray []ApplicationAppRoleInput

func (ApplicationAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRole)(nil)).Elem()
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return i.ToApplicationAppRoleArrayOutputWithContext(context.Background())
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleArrayOutput)
}

type ApplicationAppRoleOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil)).Elem()
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return o
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
func (o ApplicationAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o ApplicationAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ApplicationAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o ApplicationAppRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the permission is enabled: defaults to `true`.
func (o ApplicationAppRoleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
func (o ApplicationAppRoleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationAppRoleArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRole)(nil)).Elem()
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) Index(i pulumi.IntInput) ApplicationAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppRole {
		return vs[0].([]ApplicationAppRole)[vs[1].(int)]
	}).(ApplicationAppRoleOutput)
}

type ApplicationOauth2Permission struct {
	// Permission help text that appears in the admin consent and app assignment experiences.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id *string `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type *string `pulumi:"type"`
	// Permission help text that appears in the end user consent experience.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// Display name for the permission that appears in the end user consent experience.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value *string `pulumi:"value"`
}

// ApplicationOauth2PermissionInput is an input type that accepts ApplicationOauth2PermissionArgs and ApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionInput` via:
//
//          ApplicationOauth2PermissionArgs{...}
type ApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput
	ToApplicationOauth2PermissionOutputWithContext(context.Context) ApplicationOauth2PermissionOutput
}

type ApplicationOauth2PermissionArgs struct {
	// Permission help text that appears in the admin consent and app assignment experiences.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Permission help text that appears in the end user consent experience.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// Display name for the permission that appears in the end user consent experience.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return i.ToApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionOutput)
}

// ApplicationOauth2PermissionArrayInput is an input type that accepts ApplicationOauth2PermissionArray and ApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionArrayInput` via:
//
//          ApplicationOauth2PermissionArray{ ApplicationOauth2PermissionArgs{...} }
type ApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput
	ToApplicationOauth2PermissionArrayOutputWithContext(context.Context) ApplicationOauth2PermissionArrayOutput
}

type ApplicationOauth2PermissionArray []ApplicationOauth2PermissionInput

func (ApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return i.ToApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionArrayOutput)
}

type ApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return o
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return o
}

// Permission help text that appears in the admin consent and app assignment experiences.
func (o ApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
func (o ApplicationOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Permission help text that appears in the end user consent experience.
func (o ApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the permission that appears in the end user consent experience.
func (o ApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o ApplicationOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOauth2Permission {
		return vs[0].([]ApplicationOauth2Permission)[vs[1].(int)]
	}).(ApplicationOauth2PermissionOutput)
}

type ApplicationOptionalClaims struct {
	AccessTokens []ApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []ApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

// ApplicationOptionalClaimsInput is an input type that accepts ApplicationOptionalClaimsArgs and ApplicationOptionalClaimsOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
type ApplicationOptionalClaimsInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput
	ToApplicationOptionalClaimsOutputWithContext(context.Context) ApplicationOptionalClaimsOutput
}

type ApplicationOptionalClaimsArgs struct {
	AccessTokens ApplicationOptionalClaimsAccessTokenArrayInput `pulumi:"accessTokens"`
	IdTokens     ApplicationOptionalClaimsIdTokenArrayInput     `pulumi:"idTokens"`
}

func (ApplicationOptionalClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return i.ToApplicationOptionalClaimsOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput)
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput).ToApplicationOptionalClaimsPtrOutputWithContext(ctx)
}

// ApplicationOptionalClaimsPtrInput is an input type that accepts ApplicationOptionalClaimsArgs, ApplicationOptionalClaimsPtr and ApplicationOptionalClaimsPtrOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsPtrInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
//
//  or:
//
//          nil
type ApplicationOptionalClaimsPtrInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput
	ToApplicationOptionalClaimsPtrOutputWithContext(context.Context) ApplicationOptionalClaimsPtrOutput
}

type applicationOptionalClaimsPtrType ApplicationOptionalClaimsArgs

func ApplicationOptionalClaimsPtr(v *ApplicationOptionalClaimsArgs) ApplicationOptionalClaimsPtrInput {
	return (*applicationOptionalClaimsPtrType)(v)
}

func (*applicationOptionalClaimsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsPtrOutput)
}

type ApplicationOptionalClaimsOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) *ApplicationOptionalClaims {
		return &v
	}).(ApplicationOptionalClaimsPtrOutput)
}
func (o ApplicationOptionalClaimsOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken { return v.AccessTokens }).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken { return v.IdTokens }).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) Elem() ApplicationOptionalClaimsOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) ApplicationOptionalClaims { return *v }).(ApplicationOptionalClaimsOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken {
		if v == nil {
			return nil
		}
		return v.AccessTokens
	}).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken {
		if v == nil {
			return nil
		}
		return v.IdTokens
	}).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsAccessTokenInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArgs and ApplicationOptionalClaimsAccessTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArgs{...}
type ApplicationOptionalClaimsAccessTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput
	ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenOutput
}

type ApplicationOptionalClaimsAccessTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return i.ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenOutput)
}

// ApplicationOptionalClaimsAccessTokenArrayInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArray and ApplicationOptionalClaimsAccessTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenArrayInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArray{ ApplicationOptionalClaimsAccessTokenArgs{...} }
type ApplicationOptionalClaimsAccessTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput
	ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput
}

type ApplicationOptionalClaimsAccessTokenArray []ApplicationOptionalClaimsAccessTokenInput

func (ApplicationOptionalClaimsAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return i.ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsAccessTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsAccessTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsAccessToken {
		return vs[0].([]ApplicationOptionalClaimsAccessToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsAccessTokenOutput)
}

type ApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The display name for the application.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsIdTokenInput is an input type that accepts ApplicationOptionalClaimsIdTokenArgs and ApplicationOptionalClaimsIdTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenInput` via:
//
//          ApplicationOptionalClaimsIdTokenArgs{...}
type ApplicationOptionalClaimsIdTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput
	ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenOutput
}

type ApplicationOptionalClaimsIdTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The display name for the application.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsIdTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return i.ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenOutput)
}

// ApplicationOptionalClaimsIdTokenArrayInput is an input type that accepts ApplicationOptionalClaimsIdTokenArray and ApplicationOptionalClaimsIdTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenArrayInput` via:
//
//          ApplicationOptionalClaimsIdTokenArray{ ApplicationOptionalClaimsIdTokenArgs{...} }
type ApplicationOptionalClaimsIdTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput
	ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenArrayOutput
}

type ApplicationOptionalClaimsIdTokenArray []ApplicationOptionalClaimsIdTokenInput

func (ApplicationOptionalClaimsIdTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return i.ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsIdTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsIdTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsIdTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The display name for the application.
func (o ApplicationOptionalClaimsIdTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsIdTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsIdTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsIdToken {
		return vs[0].([]ApplicationOptionalClaimsIdToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsIdTokenOutput)
}

type ApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses []ApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// ApplicationRequiredResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessArgs and ApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessArgs{...}
type ApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput
	ToApplicationRequiredResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessOutput
}

type ApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses ApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (ApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessOutput)
}

// ApplicationRequiredResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessArray and ApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessArray{ ApplicationRequiredResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessArray []ApplicationRequiredResourceAccessInput

func (ApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below.
func (o ApplicationRequiredResourceAccessOutput) ResourceAccesses() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) []ApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
func (o ApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessOutput)
}

type ApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
}

// ApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArgs and ApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArgs{...}
type ApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput
	ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessOutput
}

type ApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

// ApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArray and ApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArray{ ApplicationRequiredResourceAccessResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessResourceAccessArray []ApplicationRequiredResourceAccessResourceAccessInput

func (ApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

type ServicePrincipalOauth2Permission struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of the permission.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalOauth2PermissionInput is an input type that accepts ServicePrincipalOauth2PermissionArgs and ServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionInput` via:
//
//          ServicePrincipalOauth2PermissionArgs{...}
type ServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput
	ToServicePrincipalOauth2PermissionOutputWithContext(context.Context) ServicePrincipalOauth2PermissionOutput
}

type ServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of the permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return i.ToServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionOutput)
}

// ServicePrincipalOauth2PermissionArrayInput is an input type that accepts ServicePrincipalOauth2PermissionArray and ServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionArrayInput` via:
//
//          ServicePrincipalOauth2PermissionArray{ ServicePrincipalOauth2PermissionArgs{...} }
type ServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput
	ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) ServicePrincipalOauth2PermissionArrayOutput
}

type ServicePrincipalOauth2PermissionArray []ServicePrincipalOauth2PermissionInput

func (ServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return i.ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionArrayOutput)
}

type ServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the permission.
func (o ServicePrincipalOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalOauth2Permission {
		return vs[0].([]ServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(ServicePrincipalOauth2PermissionOutput)
}

type GetApplicationAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

type GetApplicationOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

type GetApplicationOptionalClaims struct {
	AccessTokens []GetApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []GetApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

type GetApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

type GetApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

type GetApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below
	ResourceAccesses []GetApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to.
	ResourceAppId string `pulumi:"resourceAppId"`
}

type GetApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// The type of the permission
	Type string `pulumi:"type"`
}

type GetDomainsDomain struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType string `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName string `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault bool `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Activie Directory.
	IsInitial bool `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified bool `pulumi:"isVerified"`
}

type GetServicePrincipalAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

type GetServicePrincipalOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

type GetUsersUser struct {
	// `True` if the account is enabled; otherwise `False`.
	AccountEnabled bool `pulumi:"accountEnabled"`
	// The Display Name of the Azure AD User.
	DisplayName string `pulumi:"displayName"`
	// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableId string `pulumi:"immutableId"`
	// The primary email address of the Azure AD User.
	Mail string `pulumi:"mail"`
	// The email alias of the Azure AD User.
	MailNickname string `pulumi:"mailNickname"`
	ObjectId     string `pulumi:"objectId"`
	// The on premise sam account name of the Azure AD User.
	OnpremisesSamAccountName string `pulumi:"onpremisesSamAccountName"`
	// The on premise user principal name of the Azure AD User.
	OnpremisesUserPrincipalName string `pulumi:"onpremisesUserPrincipalName"`
	// The usage location of the Azure AD User.
	UsageLocation string `pulumi:"usageLocation"`
	// The User Principal Name of the Azure AD User.
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppRoleOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
